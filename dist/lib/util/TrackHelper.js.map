{"version":3,"file":"TrackHelper.js","sourceRoot":"","sources":["../../../src/lib/util/TrackHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import { LongStreamFormat } from '../PluginConfig';\nimport sc from '../SoundCloudContext';\nimport TrackEntity from '../entities/TrackEntity';\n\nexport default class TrackHelper {\n\n  static cacheTracks(tracks: TrackEntity[], cacheKeyGen: (keyData: Record<string, any>) => string) {\n    const cache = sc.getCache();\n    tracks.forEach((track) => {\n      const keyData = { trackId: track.id };\n      const key = cacheKeyGen(keyData);\n      cache.put(key, track);\n    });\n  }\n\n  static getPreferredTranscoding(track: TrackEntity) {\n    /**\n     * // soundcloud-testing\n     * I do not know whether the transcodings returned for a SoundCloud Go+\n     * account would include high-quality ('hq') ones and if so, their protocols\n     * and mimeTypes - not to mention the format of the actual streaming URLs\n     * obtained from these transcodings. First step would be to dump all\n     * transcodings to log so I can inspect them...\n     */\n    if (sc.getConfigValue('logTranscodings')) {\n      sc.getLogger().info(`[soundcloud-testing] Transcodings for ${track.id} - ${track.title}`);\n      sc.getLogger().info(JSON.stringify(track.transcodings));\n    }\n\n    const longStreamFormat = sc.getConfigValue('longStreamFormat');\n    const isLongStream = track.playableState === 'allowed' && track.duration && (track.duration / 1000) > 1800;\n\n    let transcodingUrl = null;\n    /**\n     * Primary filter is 'protocol' + 'quality'.\n     * Secondary filter is 'format', which is an array of strings to match, in order of preference, against a transcoding's mimeType.\n     * 'format' is optional - we return from primary filter results even if no match.\n     */\n    let preferred;\n    if (isLongStream) {\n      const format = longStreamFormat === LongStreamFormat.Opus ? [ 'ogg', 'mpeg' ] : [ 'mpeg', 'ogg' ];\n      preferred = [\n        { protocol: 'hls', format, quality: 'sq' },\n        /**\n         * Progressive stream URLs have a ridiculously short expiry period (around 30 minutes),\n         * so playback of longer streams will end prematurely with 403 Forbidden error.\n         */\n        { protocol: 'progressive', format: [ 'mpeg' ], quality: 'sq' }\n      ];\n    }\n    else {\n      preferred = [\n        //{ protocol: 'progressive', format: [ 'mp4' ], quality: 'hq' },\n        //{ protocol: 'hls', format: [ 'mp4' ], quality: 'hq' },\n        { protocol: 'progressive', format: [ 'mpeg' ], quality: 'sq' },\n        // Despite having higher bitrates, 'hls' + 'mpeg' streams have seeking problems. So 'ogg' preferred.\n        { protocol: 'hls', format: [ 'ogg', 'mpeg' ], quality: 'sq' }\n      ];\n    }\n    while (transcodingUrl === null && preferred.length > 0) {\n      const p = preferred.shift();\n      if (p) {\n        const primary = track.transcodings.filter(\n          (t) => t.protocol === p.protocol && t.quality === p.quality);\n        if (primary.length > 0) {\n          let secondary;\n          for (const format of p.format) {\n            const secondaryFiltered = primary.filter((t) => t.mimeType && t.mimeType.includes(format));\n            if (secondaryFiltered.length > 0) {\n              secondary = secondaryFiltered[0];\n              break;\n            }\n          }\n          if (!secondary) {\n            secondary = primary[0];\n          }\n          transcodingUrl = secondary.url || null;\n\n          if (sc.getConfigValue('logTranscodings')) {\n            sc.getLogger().info(`[soundcloud-testing] Chosen transcoding: ${JSON.stringify(secondary)}`);\n          }\n        }\n      }\n    }\n    return transcodingUrl;\n  }\n}\n"]}