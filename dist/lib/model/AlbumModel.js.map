{"version":3,"file":"AlbumModel.js","sourceRoot":"","sources":["../../../src/lib/model/AlbumModel.ts"],"names":[],"mappings":"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","sourcesContent":["import sc from '../SoundCloudContext';\nimport BaseModel, { LoopFetchCallbackParams } from './BaseModel';\nimport { Album, Constants } from 'soundcloud-fetch';\nimport Mapper from './Mapper';\nimport TrackEntity from '../entities/TrackEntity';\nimport TrackHelper from '../util/TrackHelper';\nimport AlbumEntity from '../entities/AlbumEntity';\n\nexport interface AlbumModelGetAlbumsParams {\n  search?: string;\n  userId?: number;\n  pageToken?: string;\n  pageOffset?: number;\n  limit?: number;\n}\n\nexport interface AlbumModelGetAlbumParams {\n  tracksOffset?: number;\n  tracksLimit?: number;\n  loadTracks?: boolean;\n}\n\ninterface GetAlbumsLoopFetchCallbackParams extends LoopFetchCallbackParams {\n  search?: string;\n  userId?: number;\n}\n\nexport default class AlbumModel extends BaseModel {\n\n  getAlbums(params: AlbumModelGetAlbumsParams) {\n    const getItems = this.commonGetCollectionItemsFromLoopFetchResult<Album>;\n    const getNextPageToken = this.commonGetNextPageTokenFromLoopFetchResult<Album>;\n\n    return this.loopFetch({\n      callbackParams: { ...params },\n      getFetchPromise: this.#getAlbumsFetchPromise.bind(this),\n      getItemsFromFetchResult: getItems.bind(this),\n      getNextPageTokenFromFetchResult: getNextPageToken.bind(this),\n      convertToEntity: this.#convertFetchedAlbumToEntity.bind(this),\n      pageToken: params.pageToken,\n      pageOffset: params.pageOffset,\n      limit: params.limit\n    });\n  }\n\n  #getAlbumsFetchPromise(params: GetAlbumsLoopFetchCallbackParams) {\n    const api = this.getSoundCloudAPI();\n    const queryParams: Record<string, any> = {\n      offset: Number(params.pageToken) || 0,\n      limit: Constants.QUERY_MAX_LIMIT\n    };\n    if (params.search) {\n      const q = params.search;\n      queryParams.type = 'album';\n      const cacheKeyParams = {\n        search: q,\n        ...queryParams\n      };\n      return sc.getCache().getOrSet(\n        this.getCacheKeyForFetch('albums', cacheKeyParams),\n        () => api.search(q, {...queryParams, type: 'album'})\n      );\n    }\n    else if (params.userId !== undefined) {\n      const userId = params.userId;\n      const cacheKeyParams = {\n        userId,\n        ...queryParams\n      };\n      return sc.getCache().getOrSet(\n        this.getCacheKeyForFetch('albums', cacheKeyParams),\n        () => api.getAlbumsByUser(userId, queryParams)\n      );\n    }\n    throw Error('[soundcloud] Failed to fetch albums: no userId or search query specified');\n  }\n\n  #convertFetchedAlbumToEntity(item: Album): AlbumEntity {\n    return Mapper.mapAlbum(item);\n  }\n\n  async getAlbum(albumId: number, options: AlbumModelGetAlbumParams = {}) {\n    const cacheKeyParams = {\n      albumId,\n      ...options\n    };\n    const info = await sc.getCache().getOrSet(\n      this.getCacheKeyForFetch('album', cacheKeyParams),\n      () => this.getSoundCloudAPI().getAlbum(albumId)\n    );\n    const album = info ? Mapper.mapAlbum(info) : null;\n    if (options.loadTracks && album && info) {\n      const offset = options.tracksOffset || 0;\n      const limit = options.tracksLimit || undefined;\n      const tracks = await info.getTracks({ offset, limit });\n      album.tracks = tracks?.reduce<TrackEntity[]>((result, t) => {\n        const te = Mapper.mapTrack(t);\n        if (te) {\n          result.push(te);\n        }\n        return result;\n      }, []) || [];\n\n      TrackHelper.cacheTracks(album.tracks, this.getCacheKeyForFetch.bind(this, 'track'));\n    }\n    return album;\n  }\n}\n"]}