{"version":3,"file":"Mapper.js","sourceRoot":"","sources":["../../../src/lib/model/Mapper.ts"],"names":[],"mappings":"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","sourcesContent":["import { Album, EntityType, Playlist, Selection, SystemPlaylist, Track, User } from 'soundcloud-fetch';\nimport UserEntity from '../entities/UserEntity';\nimport PlaylistEntity from '../entities/PlaylistEntity';\nimport TrackEntity from '../entities/TrackEntity';\nimport AlbumEntity from '../entities/AlbumEntity';\nimport { ArtworkImageUrls, AvatarImageUrls } from 'soundcloud-fetch/dist/mjs/lib/entities/Entity';\nimport SelectionEntity from '../entities/SelectionEntity';\n\nexport default class Mapper {\n\n  static mapUser(data: User) {\n    const { id, names, location, permalink } = data;\n    let locationFull = '';\n    if (location?.city) {\n      locationFull = location.city;\n      if (location.country) {\n        locationFull += `, ${location.country}`;\n      }\n    }\n\n    const result: UserEntity = {\n      id,\n      username: names?.username,\n      fullname: names?.full,\n      thumbnail: this.#getThumbnail(data),\n      permalink: permalink?.full,\n      location: locationFull\n    };\n\n    return result;\n  }\n\n  static mapPlaylist(data: Playlist | SystemPlaylist) {\n    const { id, permalink, user, trackCount } = data;\n    let title, description;\n    let type: 'playlist' | 'system-playlist';\n\n    if (data instanceof SystemPlaylist) {\n      title = (data as SystemPlaylist).texts?.title?.full;\n      description = (data as SystemPlaylist).texts?.description?.full;\n      type = 'system-playlist';\n    }\n    else {\n      title = data.texts?.title;\n      description = data.texts?.description;\n      type = 'playlist';\n    }\n\n    const result: PlaylistEntity = {\n      type,\n      id,\n      title,\n      description,\n      thumbnail: this.#getThumbnail(data),\n      permalink: permalink?.full,\n      user: user ? this.mapUser(user) : null,\n      tracks: [],\n      trackCount: trackCount\n    };\n\n    return result;\n  }\n\n  static mapTrack(data: Track) {\n    const { id, texts, publisher, mediaInfo, user } = data;\n    const album = publisher?.albumTitle || publisher?.releaseTitle || null;\n    const playableState =\n      data.isBlocked ? 'blocked' :\n        data.isSnipped ? 'snipped' :\n          'allowed';\n    const transcodings: TrackEntity['transcodings'] = mediaInfo?.transcodings?.map((t) => ({\n      url: t.url,\n      protocol: t.protocol,\n      mimeType: t.mimeType\n    })) || [];\n\n    const result: TrackEntity = {\n      type: 'track',\n      id,\n      title: texts?.title,\n      album,\n      thumbnail: this.#getThumbnail(data),\n      playableState,\n      transcodings,\n      user: user ? this.mapUser(user) : null\n    };\n\n    return result;\n  }\n\n  static mapAlbum(data: Album) {\n    const { id, permalink, user, trackCount } = data;\n    const title = data.texts?.title;\n    const description = data.texts?.description;\n\n    const result: AlbumEntity = {\n      id,\n      type: 'album',\n      title,\n      description,\n      thumbnail: this.#getThumbnail(data),\n      permalink: permalink?.full,\n      user: user ? this.mapUser(user) : null,\n      tracks: [],\n      trackCount\n    };\n\n    return result;\n  }\n\n  static mapSelection(data: Selection) {\n    const items = data.items.reduce<PlaylistEntity[]>((result, item) => {\n      if (item instanceof Playlist || item instanceof SystemPlaylist) {\n        result.push(this.mapPlaylist(item));\n      }\n      return result;\n    }, []);\n\n    const result: SelectionEntity = {\n      type: 'selection',\n      id: data.id,\n      title: data.title,\n      items\n    };\n\n    return result;\n  }\n\n  static #getThumbnail(data: EntityType): string | null {\n    let artwork: ArtworkImageUrls | AvatarImageUrls | null | undefined;\n    if (data instanceof User) {\n      artwork = data.avatar;\n    }\n    else if (data instanceof SystemPlaylist) {\n      artwork = data.artwork?.original || data.artwork?.calculated;\n    }\n    else if (data instanceof Playlist || data instanceof Track) {\n      artwork = data.artwork;\n    }\n    else {\n      artwork = null;\n    }\n\n    if (artwork) {\n      return artwork.t500x500;\n    }\n\n    if (!artwork && (\n      data instanceof Track || data instanceof Playlist ||\n      data instanceof SystemPlaylist || data instanceof Album) && data.user) {\n      return this.#getThumbnail(data.user);\n    }\n\n    return null;\n  }\n}\n"]}