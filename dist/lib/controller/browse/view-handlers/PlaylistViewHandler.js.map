{"version":3,"file":"PlaylistViewHandler.js","sourceRoot":"","sources":["../../../../../src/lib/controller/browse/view-handlers/PlaylistViewHandler.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,mFAA4C;AAE5C,0CAA2C;AAG3C,sFAA2H;AAC3H,2CAA2C;AAS3C,MAAqB,mBAAoB,SAAQ,gCAAqE;IAAtH;;;IA4DA,CAAC;IA1DW,mBAAmB;QAC3B,OAAO,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC;IACrC,CAAC;IAES,SAAS,CAAC,EAAmB;QACrC,OAAO,uBAAA,IAAI,wEAAa,MAAjB,IAAI,EAAc,EAAE,CAAC,CAAC;IAC/B,CAAC;IAES,UAAU,CAAC,WAAmD;QACtE,OAAO,IAAI,CAAC,QAAQ,CAAC,iBAAS,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;IACrE,CAAC;IAES,mBAAmB;QAC3B,OAAO,2BAAE,CAAC,OAAO,CAAC,iCAAiC,CAAC,CAAC;IACvD,CAAC;IAES,iBAAiB;QACzB,OAAO,IAAI,CAAC,WAAW,CAAC,wBAAY,CAAC,QAAQ,CAAC,CAAC;IACjD,CAAC;IAES,iCAAiC;QACzC,OAAO,gBAAgB,CAAC;IAC1B,CAAC;IAES,iBAAiB;QACzB,OAAO,2BAAE,CAAC,OAAO,CAAC,gCAAgC,CAAC,CAAC;IACtD,CAAC;CAgCF;AA5DD,sCA4DC;mFA9BC,KAAK,2CAAc,UAA2B;IAC5C,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;IAC3C,MAAM,SAAS,GAAG,OAAO,EAAE,SAAS,CAAC;IACrC,MAAM,aAAa,GAAG,2BAAE,CAAC,cAAc,CAAC,uBAAuB,CAAC,CAAC;IAEjE,MAAM,EAAE,GAAG,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IAE/D,MAAM,WAAW,GAAmC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC;IACzE,IAAI,IAAI,KAAK,SAAS,EAAE;QACtB,WAAW,CAAC,IAAI,GAAG,IAAI,CAAC;KACzB;IACD,IAAI,MAAM,CAAC,SAAS,CAAC,EAAE;QACrB,WAAW,CAAC,YAAY,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;KAC9C;IACD,IAAI,CAAC,aAAa,EAAE;QAClB,WAAW,CAAC,WAAW,GAAG,2BAAE,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;KAC7D;IAED,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,iBAAS,CAAC,QAAQ,CAAC,CAAC,WAAW,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;IAEtF,IAAI,CAAC,QAAQ,EAAE;QACb,MAAM,KAAK,CAAC,0BAA0B,CAAC,CAAC;KACzC;IAED,OAAO;QACL,MAAM,EAAE,QAAQ;QAChB,YAAY,EAAE,WAAW,CAAC,YAAY;QACtC,WAAW,EAAE,WAAW,CAAC,WAAW;KACrC,CAAC;AACJ,CAAC","sourcesContent":["import sc from '../../../SoundCloudContext';\nimport PlaylistEntity from '../../../entities/PlaylistEntity';\nimport { ModelType } from '../../../model';\nimport { PlaylistModelGetPlaylistParams } from '../../../model/PlaylistModel';\nimport { LoopFetchResult } from '../../../model/BaseModel';\nimport MusicFolderViewHandler, { MusicFolderView, MusicFolderViewHandlerGetFoldersParams } from './MusicFolderViewHandler';\nimport { RendererType } from './renderers';\nimport BaseRenderer from './renderers/BaseRenderer';\n\nexport interface PlaylistView extends MusicFolderView {\n  name: 'playlists';\n  playlistId?: string;\n  type?: 'system';\n}\n\nexport default class PlaylistViewHandler extends MusicFolderViewHandler<PlaylistView, string | number, PlaylistEntity> {\n\n  protected getFolderIdFromView(): string | number | null | undefined {\n    return this.currentView.playlistId;\n  }\n\n  protected getFolder(id: string | number): Promise<{ folder: PlaylistEntity; tracksOffset?: number; tracksLimit?: number; }> {\n    return this.#getPlaylist(id);\n  }\n\n  protected getFolders(modelParams: MusicFolderViewHandlerGetFoldersParams): Promise<LoopFetchResult<PlaylistEntity>> {\n    return this.getModel(ModelType.Playlist).getPlaylists(modelParams);\n  }\n\n  protected getFoldersListTitle(): string {\n    return sc.getI18n('SOUNDCLOUD_LIST_TITLE_PLAYLISTS');\n  }\n\n  protected getFolderRenderer(): BaseRenderer<PlaylistEntity, PlaylistEntity> {\n    return this.getRenderer(RendererType.Playlist);\n  }\n\n  protected getExplodedTrackInfoFromParamName(): 'fromAlbumId' | 'fromPlaylistId' {\n    return 'fromPlaylistId';\n  }\n\n  protected getVisitLinkTitle(): string {\n    return sc.getI18n('SOUNDCLOUD_VISIT_LINK_PLAYLIST');\n  }\n\n  async #getPlaylist(playlistId: string | number) {\n    const { type, pageRef } = this.currentView;\n    const pageToken = pageRef?.pageToken;\n    const loadAllTracks = sc.getConfigValue('loadFullPlaylistAlbum');\n\n    const id = type === 'system' ? playlistId : Number(playlistId);\n\n    const modelParams: PlaylistModelGetPlaylistParams = { loadTracks: true };\n    if (type !== undefined) {\n      modelParams.type = type;\n    }\n    if (Number(pageToken)) {\n      modelParams.tracksOffset = Number(pageToken);\n    }\n    if (!loadAllTracks) {\n      modelParams.tracksLimit = sc.getConfigValue('itemsPerPage');\n    }\n\n    const playlist = await this.getModel(ModelType.Playlist).getPlaylist(id, modelParams);\n\n    if (!playlist) {\n      throw Error('Failed to fetch playlist');\n    }\n\n    return {\n      folder: playlist,\n      tracksOffset: modelParams.tracksOffset,\n      tracksLimit: modelParams.tracksLimit\n    };\n  }\n}\n"]}