{"version":3,"file":"LibraryViewHandler.js","sourceRoot":"","sources":["../../../../../src/lib/controller/browse/view-handlers/LibraryViewHandler.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,mFAA4C;AAG5C,0CAA2C;AAE3C,wEAAgD;AAGhD,2CAA2C;AAO3C,MAAqB,kBAAmB,SAAQ,yBAA4B;IAA5E;;;IAmDA,CAAC;IAjDC,KAAK,CAAC,MAAM;QACV,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QAC3C,MAAM,SAAS,GAAG,OAAO,EAAE,SAAS,CAAC;QACrC,MAAM,UAAU,GAAG,OAAO,EAAE,UAAU,CAAC;QACvC,MAAM,WAAW,GAAiC;YAChD,IAAI;YACJ,KAAK,EAAE,2BAAE,CAAC,cAAc,CAAC,cAAc,CAAC;SACzC,CAAC;QAEF,IAAI,SAAS,EAAE;YACb,WAAW,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;SAC3C;QACD,IAAI,UAAU,EAAE;YACd,WAAW,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;SAC7C;QAED,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,iBAAS,CAAC,EAAE,CAAC,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;QAC7E,MAAM,IAAI,GAAG,IAAI,CAAC,4BAA4B,CAC5C,KAAK,EACL,uBAAA,IAAI,sEAAa,CAAC,IAAI,CAAC,IAAI,CAAC,EAC5B,uBAAA,IAAI,mEAAU,MAAd,IAAI,CAAY,CACjB,CAAC;QAEF,OAAO,IAAI,CAAC;IACd,CAAC;CAyBF;AAnDD,qCAmDC;0HAvBc,IAAkC;IAC7C,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;QACzB,OAAO,IAAI,CAAC,WAAW,CAAC,wBAAY,CAAC,KAAK,CAAC,CAAC;KAC7C;SACI,IAAI,IAAI,CAAC,IAAI,KAAK,UAAU,IAAI,IAAI,CAAC,IAAI,KAAK,iBAAiB,EAAE;QACpE,OAAO,IAAI,CAAC,WAAW,CAAC,wBAAY,CAAC,QAAQ,CAAC,CAAC;KAChD;IACD,OAAO,IAAI,CAAC;AACd,CAAC;IAGC,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;IAClC,IAAI,IAAI,KAAK,OAAO,EAAE;QACpB,OAAO,2BAAE,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;KACxC;SACI,IAAI,IAAI,KAAK,UAAU,EAAE;QAC5B,OAAO,2BAAE,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;KAC3C;SACI,IAAI,IAAI,KAAK,SAAS,EAAE;QAC3B,OAAO,2BAAE,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;KAC1C;IACD,OAAO,SAAS,CAAC;AACnB,CAAC","sourcesContent":["import sc from '../../../SoundCloudContext';\nimport AlbumEntity from '../../../entities/AlbumEntity';\nimport PlaylistEntity from '../../../entities/PlaylistEntity';\nimport { ModelType } from '../../../model';\nimport { MeModelGetLibraryItemsParams } from '../../../model/MeModel';\nimport BaseViewHandler from './BaseViewHandler';\nimport View from './View';\nimport { RenderedPage } from './ViewHandler';\nimport { RendererType } from './renderers';\n\nexport interface LibraryView extends View {\n  name: 'library';\n  type: 'album' | 'playlist' | 'station';\n}\n\nexport default class LibraryViewHandler extends BaseViewHandler<LibraryView> {\n\n  async browse(): Promise<RenderedPage> {\n    const { type, pageRef } = this.currentView;\n    const pageToken = pageRef?.pageToken;\n    const pageOffset = pageRef?.pageOffset;\n    const modelParams: MeModelGetLibraryItemsParams = {\n      type,\n      limit: sc.getConfigValue('itemsPerPage')\n    };\n\n    if (pageToken) {\n      modelParams.pageToken = pageRef.pageToken;\n    }\n    if (pageOffset) {\n      modelParams.pageOffset = pageRef.pageOffset;\n    }\n\n    const items = await this.getModel(ModelType.Me).getLibraryItems(modelParams);\n    const page = this.buildPageFromLoopFetchResult(\n      items,\n      this.#getRenderer.bind(this),\n      this.#getTitle()\n    );\n\n    return page;\n  }\n\n  #getRenderer(item: AlbumEntity | PlaylistEntity) {\n    if (item.type === 'album') {\n      return this.getRenderer(RendererType.Album);\n    }\n    else if (item.type === 'playlist' || item.type === 'system-playlist') {\n      return this.getRenderer(RendererType.Playlist);\n    }\n    return null;\n  }\n\n  #getTitle() {\n    const { type } = this.currentView;\n    if (type === 'album') {\n      return sc.getI18n('SOUNDCLOUD_ALBUMS');\n    }\n    else if (type === 'playlist') {\n      return sc.getI18n('SOUNDCLOUD_PLAYLISTS');\n    }\n    else if (type === 'station') {\n      return sc.getI18n('SOUNDCLOUD_STATIONS');\n    }\n    return undefined;\n  }\n}\n"]}